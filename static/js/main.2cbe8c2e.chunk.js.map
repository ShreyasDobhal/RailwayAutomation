{"version":3,"sources":["components/DragAndDrop.js","components/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["DragAndDrop","state","drag","dropRef","React","createRef","handleDragIn","e","preventDefault","stopPropagation","dragCounter","dataTransfer","items","length","setState","handleDragOut","handleDrag","handleDrop","files","props","clearData","this","div","current","addEventListener","removeEventListener","className","ref","children","Component","ExcelJS","require","FileSaver","stationOptions","HomePage","inputFile","trainNumber","stationNames","stationCodes","stationDates","loading","isDownloaded","onFileUploadHandler","event","target","console","log","file","i","name","getCellData","data","index","txt","includes","d","Date","month","getMonth","day","getDate","year","getFullYear","join","toString","getHeading","train","date","station","getColumnHeader","getColumnWidth","getTextMessage","dateMap","currentDate","push","message","key","createWorkbook","outputFile","inputWorkbook","Workbook","outputWorkbook","reader","FileReader","readAsArrayBuffer","onload","buffer","result","xlsx","load","then","sheet","worksheets","stationCode","stationName","stationDate","worksheet","addWorksheet","addConditionalFormatting","rules","type","formulae","style","fill","pattern","bgColor","argb","mergeCells","getCell","value","alignment","horizontal","font","size","bold","color","col","cellIndex","String","fromCharCode","fgColor","getColumn","width","SN","eachRow","includeEmpty","rowData","rowNumber","row","values","writeBuffer","saveAs","Blob","catch","err","alert","stationsChangeHandler","label","dateChangeHandler","dates","dateArray","split","trim","submitHandler","copyToClipboard","text","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","handleCopyButton","x","getElementById","setTimeout","replace","typeaheadRef","id","src","alt","Spinner","animation","role","height","onClick","placeholder","onChange","options","isMulti","htmlFor","accept","multiple","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2cbe8c2e.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass DragAndDrop extends Component {\n\n    state = {\n        drag: false\n    }\n\n      \n    dropRef = React.createRef()\n\n    handleDragIn = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter++;\n        if (e.dataTransfer.items && e.dataTransfer.items.length>0) {\n            this.setState({\n                drag:true\n            })\n        }\n    }\n\n    handleDragOut = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter--;\n        if (this.dragCounter>0) \n            return\n        this.setState({\n            drag:false\n        })\n    }\n\n    handleDrag = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    handleDrop = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState({\n            drag:false\n        });\n        if (e.dataTransfer.files && e.dataTransfer.files.length>0) {\n            this.props.handleDrop(e.dataTransfer.files);\n            e.dataTransfer.clearData();\n            this.dragCounter=0;\n        }\n    }\n\n    componentDidMount() {\n        this.dragCounter=0;\n        let div = this.dropRef.current;\n        div.addEventListener('dragenter',this.handleDragIn);\n        div.addEventListener('dragleave',this.handleDragOut);\n        div.addEventListener('dragover',this.handleDrag);\n        div.addEventListener('drop',this.handleDrop);\n    }\n\n    componentWillUnmount() {\n        let div = this.dropRef.current;\n        div.removeEventListener('dragenter',this.handleDragIn);\n        div.removeEventListener('dragleave',this.handleDragOut);\n        div.removeEventListener('dragover',this.handleDrag);\n        div.removeEventListener('drop',this.handleDrop);\n    }\n\n    render() {\n        return (\n            <div className='drag-drop-outer-container' ref={this.dropRef}>\n                {this.state.drag &&\n                    <div className='drag-drop-overlay'>\n                        <div className='drag-drop-overlay-text'>\n                            <div>Drop here</div>\n                        </div>\n                    </div>\n                }\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default DragAndDrop;","\n\nimport React, {Component} from 'react';\nimport DragAndDrop from './DragAndDrop';\nimport Select from 'react-select'\nimport { Spinner } from 'reactstrap';\n\nconst ExcelJS = require('exceljs');\nvar FileSaver = require('file-saver');\n\nconst stationOptions = require('../data.json');\n\nclass HomePage extends Component {\n\n    state = {\n        inputFile: null,\n\n        trainNumber: null,\n        stationNames: [],\n        stationCodes: [],\n        stationDates: [],\n\n        loading: false,\n\n        isDownloaded: false,\n    }\n\n    constructor(props) {\n        super(props);\n        this.typeaheadRef = React.createRef();\n    }\n\n    onFileUploadHandler = (event)=> {\n        this.handleDrop(event.target.files);\n    }\n\n    handleDrop = (files) => {\n        console.log(\"Uploading files\",files);\n        let file = null;\n        for (let i=0;i<files.length;i++) {\n            if (!files[i].name)\n                return;\n            file = files[i];\n        }\n        console.log(\"Uploaded\",file.name);\n        this.setState({\n            inputFile: file,\n            isDownloaded: false,\n            trainNumber: null,\n            stationNames: [],\n            stationCodes: [],\n            stationDates: []\n        });\n    }\n\n    getCellData = (data, index) => {\n        const time_cell = [1, 2];\n        const number_cell = [12, 13];\n        let txt = '';\n\n        if (!data[index+1])\n            return txt\n        \n        if (time_cell.includes(index)) {\n            let d = new Date(data[index+1]);\n            let month = '' + (d.getMonth() + 1);\n            let day = '' + d.getDate();\n            let year = d.getFullYear();\n\n            if (month.length < 2) \n                month = '0' + month;\n            if (day.length < 2) \n                day = '0' + day;\n\n            txt = [year, month, day].join('-');\n        } else if (number_cell.includes(index)) {\n            txt = data[index+1].toString();\n        }else {\n            txt = data[index+1];\n        }\n        \n        return txt;\n    }\n    \n    getHeading = (train, date, station) => {\n        return 'LIST OF PASSENGERS DEBOARDING AT ' + station + ' FROM TRAIN No ' + train + ' DATED ' + date;\n    }\n\n    getColumnHeader = (index) => {\n        const header = ['SL NO.', 'TRN SRC DATE', 'JRNY DATE', 'TRNNO', 'CLS',\n                  'FROM STN', 'TO STN', 'BOARDING POINT', 'ENRT STN', \n                  'PSGN NAME', 'AGE', 'GENDER', 'MOBNO', 'PNR NO', 'COACHNO',\n                  'BERTHNO RACNO WLNO', 'BKG LOC ID', 'PNRTKTTYPE', 'DESTINATION ADDRESS'];\n        return header[index];\n    }\n\n    getColumnWidth = (index) => {\n        const width = [7, 14, 14, 10, 10, 10, 10, 21, 14, 28, 10, 14, 18, 18,\n                 14, 27, 14, 14, 120];\n        return width[index]\n    }\n\n    getTextMessage = () => {\n\n        let dateMap = {};\n        for (let i = 0; i < this.state.stationDates.length; i++) {\n            let currentDate = this.state.stationDates[i];\n            if (!(currentDate in dateMap))\n                dateMap[currentDate] = [];\n            dateMap[currentDate].push(this.state.stationCodes[i]);\n        }\n\n        let message = '';\n        console.log(dateMap);\n        for (let key in dateMap) {\n            message = message + `LIST OF PASSENGERS DEBOARDING AT *${dateMap[key].join(' ')}* FROM TRAIN NO ${this.state.trainNumber} DATED ${key} 👇 \\n`;\n        }\n\n        return message;\n        \n    }\n\n    createWorkbook = () => {\n        const emptyMessage = 'No matching records found';\n        const outputFile = this.state.trainNumber+'.xlsx';\n        \n        const inputWorkbook = new ExcelJS.Workbook();\n        const outputWorkbook = new ExcelJS.Workbook();\n        const reader = new FileReader();\n\n        // Reading input file\n        reader.readAsArrayBuffer(this.state.inputFile);\n        reader.onload = () => {\n            const buffer = reader.result;\n            inputWorkbook.xlsx.load(buffer).then(inputWorkbook => {\n                const sheet = inputWorkbook.worksheets[0];\n\n                for (let i = 0; i < this.state.stationCodes.length; i++) {\n                    const stationCode = this.state.stationCodes[i];\n                    const stationName = this.state.stationNames[i];\n                    const stationDate = this.state.stationDates[i];\n\n                    // Adding sheet\n                    const worksheet = outputWorkbook.addWorksheet(stationCode);\n\n                    // Adding conditional formatting\n                    worksheet.addConditionalFormatting({\n                        ref: 'A1:S1000',\n                        rules: [{\n                            type: 'expression',\n                            formulae: ['AND(ISEVEN(ROW()),NOT(ROW()=2))'],\n                            style: {\n                                fill: {\n                                    type: 'pattern',\n                                    pattern: 'solid',\n                                    bgColor: {argb: 'ffe1f2ff'}\n                                }\n                            }\n                        }]\n                    });\n\n                    // Adding heading\n                    worksheet.mergeCells('A1:S1');\n                    worksheet.getCell('A1').value = this.getHeading(this.state.trainNumber, stationDate, stationName);\n                    worksheet.getCell('A1').alignment = { horizontal: 'center'};\n                    worksheet.getCell('A1').font = { name:'Cambria', size: 18, bold: true, color: {argb: 'ff1f497d'}};\n\n                    // Adding column headers\n                    for (let col=0; col<19; col++) {\n                        let cellIndex = String.fromCharCode(65+col)+'2';\n                        worksheet.getCell(cellIndex).value = this.getColumnHeader(col);\n                        worksheet.getCell(cellIndex).alignment = { horizontal: 'center'};\n                        worksheet.getCell(cellIndex).font = { name:'Calibri', size: 12, bold: true, color: {argb: 'ffffffff'}};\n                        worksheet.getCell(cellIndex).fill = { type: 'pattern', pattern: 'solid', fgColor: {argb: 'ff0070c0'}};\n                        worksheet.getColumn(col+1).width = this.getColumnWidth(col);\n                    }\n\n                    // Copying data\n                    let SN = 1;\n                    sheet.eachRow({ includeEmpty: true }, (rowData, rowNumber) => {\n                        if (rowNumber > 6) {\n                            let row = rowData.values;\n                            if (row[7] === stationCode) {\n                                for (let col=0; col<19; col++) {\n                                    if (col===0) {\n                                        worksheet.getCell(String.fromCharCode(65+col)+(SN+2)).value = SN;\n                                    } else {\n                                        worksheet.getCell(String.fromCharCode(65+col)+(SN+2)).value = this.getCellData(row, col);\n                                    }\n                                }\n                                SN+=1;\n                            }\n                        }\n                    });\n\n                    // No data found\n                    if (SN===1) {\n                        worksheet.mergeCells('A3:S3');\n                        worksheet.getCell('A3').value = emptyMessage;\n                        worksheet.getCell('A3').alignment = { horizontal:'center'};\n                    }\n                }\n\n                // Saving file\n                outputWorkbook.xlsx.writeBuffer()\n                    .then(buffer => {\n                        FileSaver.saveAs(new Blob([buffer]), outputFile);\n                        this.setState({\n                            loading: false,\n                            inputFile: null,\n                            isDownloaded: true\n                        });\n                    })\n                    .catch(err => {\n                        console.log('Error writing excel export', err);\n                        alert('Failed to create the report');\n                    });\n                \n            });\n        }\n\n    }\n\n    stationsChangeHandler = (values) => {\n        let stationCodes = [];\n        let stationNames = [];\n\n        for (let i=0;values && i<values.length;i++) {\n            stationCodes.push(values[i].value);\n            stationNames.push(values[i].label);\n        }\n\n        console.log(values);\n\n        this.setState({stationCodes, stationNames});\n    }\n\n    dateChangeHandler = (event) => {\n        let dates = event.target.value;\n        if (!dates)\n            return;\n        \n        let dateArray = dates.split(' ');\n        let stationDates = [];\n        for (let i=0;i<dateArray.length;i++) {\n            let stationDate = dateArray[i].trim();\n            if (stationDate && stationDate !== '')\n                stationDates.push(stationDate);\n        }\n\n        this.setState({stationDates});\n    }\n\n    submitHandler = () => {\n\n        if (!this.state.trainNumber || this.state.trainNumber === '' ||\n            !this.state.stationNames || this.state.stationNames === [] ||\n            !this.state.stationDates || this.state.stationDates === []) {\n            alert('Enter valid details');\n            return;\n        } else if (this.state.stationCodes.length !== this.state.stationDates.length) {\n            alert(\"Number of dates and stations doesn't match\");\n            return;\n        }\n\n        this.setState({loading: true});\n        this.createWorkbook();\n    }\n\n    copyToClipboard = (text) => {\n        let textField = document.createElement('textarea');\n        textField.innerText = text;\n        document.body.appendChild(textField);\n        textField.select();\n        document.execCommand('copy');\n        textField.remove();\n    }\n\n    handleCopyButton = () => {\n        // Generating text message and copying it\n        const message = this.getTextMessage();\n        // const message = 'Hello World';\n        this.copyToClipboard(message);\n\n        const x = document.getElementById(\"snackbar\");\n        x.className = \"show\";\n        setTimeout(() => { x.className = x.className.replace(\"show\", \"\"); }, 3000);\n    }\n\n    render() {\n\n        return (\n            <DragAndDrop handleDrop={this.handleDrop}>\n                <div className='page-container'>\n                    <div id=\"snackbar\">Message copied !</div>\n                    <img src='excel.png' className='water-mark' alt='excel watermark'/>\n                    {this.state.loading ? (\n                        <Spinner animation=\"border\" role=\"status\" style={{ width: '3rem', height: '3rem' }}>\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                    ) : null}\n\n                    {this.state.isDownloaded ? (\n                       <button className='copy-btn' onClick={this.handleCopyButton}>Copy message</button>\n                    ):null}\n\n                    {this.state.inputFile ? (\n                        <div className='container'>\n                            <p>{this.state.inputFile.name}</p>\n                            <input className='input-field' type='text' placeholder='Enter train number' onChange={(event) => {this.setState({trainNumber: event.target.value})}}/>\n                            <Select ref={this.typeaheadRef} options={stationOptions} isMulti className='input-typeahead' onChange={this.stationsChangeHandler}/>\n                            <input className='input-field' type='text' placeholder='Enter arrival dates eg. 26.10.2020, 27.10.2020' onChange={this.dateChangeHandler}/>\n                            <div className='upload-btn-container'>\n                                <button className='upload-btn' onClick={this.submitHandler}>Submit</button>\n                            </div>\n                        </div>\n                    ) : (\n                        <div>\n                            <label htmlFor='fileUpload' className='upload-btn'>Upload a file</label>\n                            <input id='fileUpload' className='upload-input' type='file' accept=\".xlsx\" onChange={this.onFileUploadHandler} multiple/>\n                        </div>\n                    )}\n\n                    \n                </div>\n            </DragAndDrop>\n            \n        );\n    }\n}\n\nexport default HomePage\n\n// LIST OF PASSENGERS DEBOARDING AT BE MB FROM TRAIN NO 012345 DATED 07.11.2020 👇 \n\n// LIST OF PASSENGERS DEBOARDING AT *BE* FROM TRAIN NO 01234 DATED 07.11.2020 👇 LIST OF PASSENGERS DEBOARDING AT *MB* FROM TRAIN NO 01234 DATED 08.11.2020 👇 \n\n//              LIST OF PASSENGERS DEBOARDING AT *BE* FROM TRAIN NO 0123 DATED 07.11.2020 👇             LIST OF PASSENGERS DEBOARDING AT *MB* FROM TRAIN NO 0123 DATED 08.11.2020 👇","import './App.css';\nimport HomePage from './components/HomePage';\n\n\nfunction App() {\n\treturn  (\n\t\t<HomePage />\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import 'react-bootstrap-typeahead/css/Typeahead.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}